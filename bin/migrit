#!/usr/bin/env node

var migrit    = require('../migrit')
  , up        = migrit.up
  , down      = migrit.down
  , Migration = migrit.migration
  , exporter  = migrit.exporter
  , importer  = migrit.importer
  , sql       = migrit.sql
  , config    = migrit.config
  , prompt    = require('prompt')
  , args      = require('yargs')
  , argv      = args.argv
  , fs        = require('q-io/fs')
  , q         = require('q')
  , additive
  ;

prompt.message = '';
prompt.delimiter = '';



// the first command line option tells which sub-program is being run

// accept other command line arguments and delegate to sub-programs as necessary

config.then(function(c){
  var title
    , schema
    , filename
    ;

  switch(argv._[0]){
    case undefined:
      argv = args
        .usage("Usage: $0 --title 'title for migration'")
        .alias('t', 'title')
        .describe('t', 'title for the migration')
        .argv;
      try{
        prompt.override = args.argv;
        prompt.start();

        schema = {
          properties: {
            t: {
              message: 'What will this migration be doing?'.green
            , required: true
            }
          }
        }

        prompt.get(schema, function(err, result){
          Migration.create(result.t, c);
        });
      }catch(err){
        console.log(err);
      }
      break;
    case 'up':
      argv = args
        .usage("Usage: $0 up --max 12345 --database connection_name")
        .alias('m', 'max')
        .alias('d', 'database')
        .alias('n', 'num')
        .default('m', false)
        .default('d', 'local')
        .describe('n', 'number of migrations to run down from current location')
        .describe('m', 'maximum migration to run')
        .describe('d', 'database connection name')
        .argv;

        if(argv.n){
          sql.connect(c, argv.d)

          q.all([
            sql.getDBState()
          , Migration.getSet(c)])
          .then(function(promises){
              var state = promises[0]
                , migrations = promises[1]
                , current = migrations.indexOf(state)
                , advance = argv.n
                , to_state = migrations[current+advance]
                ;
              return up(c, argv.d, to_state);
            })
            .catch(function(err){
              console.log(err);
              console.log(err.stack);
            })
        }else{
          up(c, argv.d, argv.m);
        }
      break;
    case 'down':
      argv = args
        .usage("Usage: $0 down --max 12345 --database connection_name")
        .alias('m', 'min')
        .alias('d', 'database')
        .alias('n', 'num')
        .default('m', 0)
        .default('d', 'local')
        .describe('n', 'number of migrations to run down from current location')
        .describe('m', 'minimum migration to run')
        .describe('d', 'database connection name')
        .argv;

        if(argv.n){
          sql.connect(c, argv.d)

          q.all([
            sql.getDBState()
          , Migration.getSet(c)])
          .then(function(promises){
              var state = promises[0]
                , migrations = promises[1]
                , current = migrations.indexOf(state)
                , advance = argv.n
                , to_state = migrations[current-advance]
                ;
              
              return down(c, argv.d, to_state);
            })
            .catch(function(err){
              console.log(err);
              console.log(err.stack);
            })
        }else{
          down(c, argv.d, argv.m);
        }

      break;
    case 'export':
      argv = args
        .usage("Usage: $0 export --fixture set_name --database connection_name")
        .alias('f', 'fixture')
        .alias('d', 'database')
        .default('f', 'default')
        .default('d', 'local')
        .describe('f', 'name of fixture set')
        .describe('d', 'database connection name')
        .argv;
      exporter(c, argv.d, argv.f);
      break;
    case 'import':
      argv = args
        .usage("Usage: $0 import --fixture set_name --database connection_name")
        .alias('a', 'add')
        .alias('f', 'fixture')
        .alias('d', 'database')
        .default('f', 'default')
        .default('d', 'testing')
        .describe('f', 'name of fixture set')
        .describe('d', 'database connection name')
        .argv;
      additive = argv.a;
      importer(c, argv.d, argv.f, additive);
      break;
    case 'init':
      console.log("adding database-connections file to project");
      // create database-connections.json file in curent working directory
      // if etc/ dir exists in cwd, create file in there
      filename = process.cwd();
      return fs.isDirectory(filename+'/etc')
        .then(function(is_directory){
          if(is_directory){
            console.log("\twriting into /etc");
            filename = filename+'/etc';
          }
          filename = filename+'/database-connections.json';
          fs.read(__dirname+'/../etc/database-connections.json')
            .then(function(data){
              fs.write(filename, data)
                .then(function(){
                  console.log("\ndatabase connections file created at "+filename);
                });
            });
        })
        .catch(function(err){
          console.log(err);
        })
        ;
      break
    default:
      console.log('show help');
      break; 
  }
});
