{"name":"Migrit","tagline":"migrate iteratively - environment agnostic schema migration manager","body":"Installation\r\n------------\r\n    \r\n    $ sudo npm install migrit -g\r\n\r\nPurpose\r\n-------\r\nIterative Schema Migrations - currently only works with MySQL, but future plans\r\ninclude expanding to other databases\r\n\r\nUse\r\n---\r\n\r\n## config file\r\n    \r\nmigrit expects to find a `migrit.json` or `.migrit.json` file to give it\r\ninformation about where and how to connect to a database, how to find the\r\nstate of the schema\r\n\r\nit will look in all directories above your current directory, and all\r\ndirectories named `etc/` inside those directories. If none is found, it will\r\nerror out\r\n\r\nminimum migrit.json file:\r\n\r\n    {\r\n      \"connections\": {\r\n        \"local\": {\r\n          \"host\": \"127.0.0.1\"\r\n        , \"database\": \"migration_demo\"\r\n        , \"port\": \"3306\"\r\n        , \"user\": \"root\"\r\n        , \"pass\": \"\"\r\n        }\r\n      }\r\n    }\r\n\r\noptional args:\r\n\r\n    {\r\n      \"state_table\": \"database_state\"  // name of table migrit watches for state\r\n    , \"state_field\": \"timestamp\"       // field with database state in state_table\r\n    , \"migrations\" : \"./migrations\"    // path to migrations dir, relative to config\r\n    , \"fixtures\"   : \"./fixtures\"      // path to fixtures dir, relative to config\r\n    , \"connections\": {\r\n        \"local\": {\r\n          \"host\": \"127.0.0.1\"\r\n        , \"database\": \"migration_demo\"\r\n        , \"port\": \"3306\"\r\n        , \"user\": \"root\"\r\n        , \"pass\": \"\"\r\n        }\r\n      , \"staging\": {\r\n          \"host\": \"my.fancy.sqlserver.com\"\r\n        , \"database\": \"migration_staging\"\r\n        , \"port\": \"6606\"\r\n        , \"user\": \"mySqlAdmin\"\r\n        , \"pass\": \"super5ecret\"\r\n        }\r\n      , \"etc\": {\r\n          \"host\": \"my.fancy.sqlserver.com\"\r\n        , \"database\": \"migration_etc\"\r\n        , \"port\": \"6606\"\r\n        , \"user\": \"mySqlAdmin\"\r\n        , \"pass\": \"super5ecret\"\r\n        }\r\n      }\r\n    }\r\n\r\nconnections are arbitrary. If no `--database` tag is specified,\r\n`--database local` will be assumed\r\n\r\n## create migrations\r\n\r\ncreate a new migration\r\n\r\n    $ migrit\r\n\r\nwhich will prompt you for your migration's puprose\r\n\r\n    $ migrit -t 'set up users table'\r\n\r\nthis will create a new migration file named something like\r\n`1416595944375_set_up_users_table`, and inside that file will be some json\r\nwithin which you will add your sql to define the migration\r\n\r\nfor example:\r\n\r\n    {\r\n      \"author\": \"Evan Short\",\r\n      \"description\": \"set up users table\",\r\n      \"created_at\": 1416595944375,\r\n      \"up\": [\r\n        \"CREATE TABLE users(user_id VARCHAR(255), created_at DATETIME)\"\r\n      ],\r\n      \"down\": [\r\n        \"DROP TABLE users\"\r\n      ]\r\n    }\r\n\r\nor, because the sql blocks are defined in arrays, you may issue multiple sql\r\ncommands\r\n\r\n    {\r\n      \"author\": \"Evan Short\",\r\n      \"description\": \"set up users table\",\r\n      \"created_at\": 1416595944375,\r\n      \"up\": [\r\n        \"CREATE TABLE users(user_id VARCHAR(255), created_at DATETIME)\"\r\n      , \"alter table users add name varchar(255)\"\r\n      ],\r\n      \"down\": [\r\n        \"alter table users drop column name\"\r\n      , \"DROP TABLE users\"\r\n      ]\r\n    }\r\n\r\n## bring up the database\r\n\r\nonce you have created a migration, you will want to apply it to your database\r\n\r\n    $ migrit up \r\n\r\nbring the database up to a particular migration using a particular connection\r\n\r\n    $ migrit up --max [migration_timestamp] --database [database_name]\r\n\r\nwithout the `--database` option, migrit assumes you mean `local`\r\n\r\noptionally, you may migrate up a number of steps from the current location\r\n\r\n    $ migrit up -n 1\r\n\r\n\r\n## bring down the database\r\n\r\ntake the database all the way down\r\n\r\n    $ migrit down\r\n\r\ntake the database down to a particular migration using a particular connection.\r\nboth flags optional\r\n\r\n    $ migrit down --min [migration_timestamp] --database [database_name]\r\n\r\nwithout the `--database` option, migrit assumes you mean `local`\r\n\r\noptionally, you may migrate up a number of steps from the current location\r\n\r\n    $ migrit down -n 1\r\n\r\n## fixtures\r\n\r\nmake a database into a series of JSON encoded fixtures \r\n\r\n    $ migrit export --database databaseName --fixture fixtureSet\r\n\r\nturn a series of JSON encoded fixtures into a database\r\n\r\n    $ migrit import --fixture fixtureSet --database databaseName\r\n\r\nto save yourself potential problems because of confusion, **I very strongly \r\nadvise against naming fixture sets the same as databases**. I cannot emphasize\r\nthis enough. \r\n\r\nby default, an import will delete all information in non-state-tables. To make \r\nin import additive, simply add the -a or --add flag\r\n\r\n    $migrit import --add\r\n\r\n# Next Features\r\n\r\n- migrate database to appropriate place based on database state file on import\r\n  - assume testing database instead of local on fixture import\r\n\r\n- migration scripts for data management\r\n  - up and down scripts\r\n  - before and after for each\r\n\r\n- automated schema comparison to ensure \"up\" and \"down\" scripts cancel each other out\r\n\r\n- export existing schema as migrations\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}