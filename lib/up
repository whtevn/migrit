#!/usr/bin/env node
var fs = require('q-io/fs')
  , mysql = require('mysql')
  , q     = require('q');
  ;

function up(config, database, max){
  var timestamp
    , db = config.connections[database]
    , connection = mysql.createConnection(db)
    , table_name = (config.state_table||'database_state')
    , field_name = (config.state_field||'timestamp')
    ;

  connection.connect();

	q.ninvoke(connection, 'query', 
      "SELECT "+field_name+" FROM "+table_name
    )
    .then(function(rows){
      var state
        ;
      connection.end();
      state = ((rows[0]&&rows[0].timestamp) || 0)
      return execute_migrations(config, database, max, state)
      
    })
    .catch(function(err){
      if(err.code == 'ER_NO_SUCH_TABLE'){
        console.log("creating "+table_name+" table with an integer field named '"+field_name+"'");
        q.ninvoke(connection, 'query',
          "CREATE TABLE "+table_name+"("+field_name+" INT, updated_at DATETIME)"
        )
        .then(function(){
          console.log("inserting initial values into "+table_name);
          return q.ninvoke(connection, 'query',
            "INSERT INTO "+table_name+"("+field_name+", updated_at) VALUES(0, NOW())");
        })
        .then(function(){
          return execute_migrations(config, database, max, 0)
        })
        .catch(function(err){
          console.log("line 43:", err);
        });
      }else{
        console.log('line 46:', err);
        connection.end();
      }
    });
}

function execute_migrations(config, database, max, state){
  fs.listTree(config.base+(config.migrations||'migrations'))
    .then(function(path){
      // get the current database state
      var db_state = 0;

      // look at each migration file under the given path
      path.forEach(function(file){
        fs.isFile(file)
          .then(function(is_file){
            // get the timestamp of the migration file
            timestamp = +(file.match(/\/(\d*)_.*$/)[1]);

            // if the path being examined is a file, and the timestamp
            // is under the given maximum, or there is no given maximum
            if(is_file && (timestamp <= max||!max)){
              if(db_state < timestamp){
                // if the migration has not already been run
                // attempt to run the migration array
                console.log('running', file);
              }else{
                // if the migration has already been run, give
                // a message to that effect
                console.warn('exists', file);
              }
            }else{
              // skip files that are outside of the user-defined range
              console.warn('skipped', file);
            }
          });
      })
    });
}

module.exports = up;
